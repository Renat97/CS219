     1                                  ; Write a program called FIND8 to find the largest unsigned 8-bit word in a list. The list begins at address 0x0154. The length of the
     2                                  ; list is stored in an 8-bit variable at address 0x0150. Store the largest entry in memory location 0x0152.
     3                                  ; Renat Norderhaug
     4                                  ;  Does it store the least significant bits first?
     5                                  ;
     6                                  org 100h
     7                                  section .text
     8                                  ; beginning address of code = 0x0100
     9                                  ;*******************************************************
    10                                  ;
    11                                  ; put your code here
    12                                  ;
    13                                  start:
    14                                  
    15 00000000 BE0000                  mov si,0 ; initialize the counter
    16 00000003 B000                    mov al,0 ; initalize max value register
    17                                  
    18                                  Lp1: ; 1st loop
    19 00000005 8AA4[0200]              mov ah,[DLST + si] ; move the start of the list into ah
    20 00000009 38C4                    cmp ah, al ; subtract start from max value register but dont change values, just change flags
    21 0000000B 7705                    JA check ; if ah is greater than al then jump to "check"
    22 0000000D 88E0                    mov al, ah ; move the value into the max value register since it is not greater than
    23 0000000F 46                      inc si ; increment si to the next number in the list
    24 00000010 EBF3                    Jmp Lp1 ; repeat the process of LP1
    25                                  
    26                                  check: ; checks to see if we are at the end of the list
    27 00000012 8A3E[0000]              mov bh,[LSTL] ; moves the length of the list which is 14 into bh
    28 00000016 80EF01                  sub bh,1 ; subtract the length of the list for the null terminator
    29                                  cmp bh, si ; subtract length from counter
    30          ******************       error: invalid combination of opcode and operands
    31 00000019 7E00                    jle done ; if length is less than or equal to then store the max value register into the larget register
    32                                  
    33                                  
    34                                  done:
    35                                  mov [largest], al ; move al into the location if it is greater than
    36          ******************       error: symbol `largest' undefined
    37                                  
    38                                  
    39                                  
    40                                  
    41                                  
    42                                  ; end of your code
    43                                  ;
    44                                  ;*******************************************************
    45 0000001B EBFE                    ILP:	JMP	ILP				;infinite loop
    46                                  ;
    47 0000001D 00<rept>                TIMES 50H -($-$$) DB 0
    48                                  section .data
    49                                  ; beginning address of data = 0x0150
    50                                  ;*******************************************************
    51                                  ;
    52                                  ; put your data items here
    53                                  ;
    54 00000000 0E                      LSTL db 14  ; length of the list, stored in 150
    55 00000001 00                      Largest Db 0 ; stored in memory location 152
    56 00000002 FE0519FA64961EC8FD-     DLST:	DB	254,5,25,250,100,150,30,200,253,15,23,46,73,175,0
    57 0000000B 0F172E49AF00       
    58                                  
    59                                  ; DB for up to 8 bits, DW for up to 16 bits, DD for up to 32 bits, DQ for up to 64 bits
    60                                  
    61                                  
    62                                  ;
    63                                  ; end of your data
    64                                  ;
    65                                  ;*******************************************************
