     1                                  ; Write an 8086 program to take a string at STR1 below, and write it back to STR2 in reverse order
     2                                  ; Renat Norderhaug
     3                                  ;  Does it store the least significant bits first?
     4                                  ;
     5                                  org 100h
     6                                  section .text
     7                                  ; beginning address of code = 0x0100
     8                                  ;*******************************************************
     9                                  ;
    10                                  ; put your code here
    11                                  ;
    12                                  start:
    13 00000000 BE0A00                  mov si, 10 ; length of the 1st string
    14 00000003 BF0000                  mov di, 0 ; destination index register
    15                                  
    16                                  LP1:
    17 00000006 8A84[0000]              mov al, [str1+si] ; moves last element into ax, which is H
    18 0000000A 8885[0C00]              mov [str2 + di], al ; moves to first element of str2
    19 0000000E 4E                      dec si ; decrement the source index counter, so it moves the element before in the reversed string
    20 0000000F 47                      inc di ; increment the destination index counter, so you can move the element to the next spot in str2
    21 00000010 83FE00                  cmp si,0 ; compare si, 0, so once the source index hits 0 you will be done because the length starts at 0?
    22 00000013 7402                    JE ILP  ; if you are at the null terminator the go to infinite loop
    23 00000015 EBEF                    jmp LP1 ; jumps back if it is not the end of 1st string
    24                                  
    25                                  
    26                                  
    27                                  
    28                                  ;*******************************************************
    29 00000017 EBFE                    ILP:	JMP	ILP				;infinite loop
    30                                  ;
    31 00000019 00<rept>                TIMES 50H -($-$$) DB 0
    32                                  section .data
    33                                  ; beginning address of data = 0x0150
    34                                  ;*******************************************************
    35                                  ;
    36                                  ; put your data items here
    37                                  ;
    38 00000000 646C726F57206F6C6C-     str1 db 'dlroW olleH', 0  ; stored between memory locations 150 - 153
    39 00000009 654800             
    40 0000000C 00                      str2 db 0  ; stored in memory location 154
    41                                  
    42                                  ; DB for up to 8 bits, DW for up to 16 bits, DD for up to 32 bits, DQ for up to 64 bits
    43                                  
    44                                  
    45                                  ;
    46                                  ; end of your data
    47                                  ;
    48                                  ;*******************************************************
